jobs:
  ElmExtraction:
    needs:
    - coq
    - metacoq
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v30
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup metacoq
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, coq-community
        name: metacoq
    - id: stepGetDerivation
      name: Getting derivation for current job (ElmExtraction)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"coq-8.20\" --argstr job \"ElmExtraction\" \\\n   --dry-run 2> err > out
        || (touch fail; true)\n"
    - name: Error reporting
      run: "echo \"out=\"; cat out\necho \"err=\"; cat err\n"
    - name: Failure check
      run: if [ -e fail ]; then exit 1; else exit 0; fi;
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: (echo -n status=; cat out err | grep "built:" | sed "s/.*/built/") >> $GITHUB_OUTPUT
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: metacoq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "metacoq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "ElmExtraction"
  RustExtraction:
    needs:
    - coq
    - metacoq
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v30
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup metacoq
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, coq-community
        name: metacoq
    - id: stepGetDerivation
      name: Getting derivation for current job (RustExtraction)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"coq-8.20\" --argstr job \"RustExtraction\" \\\n   --dry-run 2> err > out
        || (touch fail; true)\n"
    - name: Error reporting
      run: "echo \"out=\"; cat out\necho \"err=\"; cat err\n"
    - name: Failure check
      run: if [ -e fail ]; then exit 1; else exit 0; fi;
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: (echo -n status=; cat out err | grep "built:" | sed "s/.*/built/") >> $GITHUB_OUTPUT
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: metacoq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "metacoq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "RustExtraction"
  coq:
    needs: []
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v30
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup metacoq
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, coq-community
        name: metacoq
    - id: stepGetDerivation
      name: Getting derivation for current job (coq)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"coq-8.20\" --argstr job \"coq\" \\\n   --dry-run 2> err > out || (touch
        fail; true)\n"
    - name: Error reporting
      run: "echo \"out=\"; cat out\necho \"err=\"; cat err\n"
    - name: Failure check
      run: if [ -e fail ]; then exit 1; else exit 0; fi;
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: (echo -n status=; cat out err | grep "built:" | sed "s/.*/built/") >> $GITHUB_OUTPUT
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "coq"
  equations:
    needs:
    - coq
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v30
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup metacoq
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, coq-community
        name: metacoq
    - id: stepGetDerivation
      name: Getting derivation for current job (equations)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"coq-8.20\" --argstr job \"equations\" \\\n   --dry-run 2> err > out || (touch
        fail; true)\n"
    - name: Error reporting
      run: "echo \"out=\"; cat out\necho \"err=\"; cat err\n"
    - name: Failure check
      run: if [ -e fail ]; then exit 1; else exit 0; fi;
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: (echo -n status=; cat out err | grep "built:" | sed "s/.*/built/") >> $GITHUB_OUTPUT
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: stdlib'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "stdlib"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "equations"
  metacoq:
    needs:
    - coq
    - equations
    - metacoq-safechecker-plugin
    - metacoq-erasure-plugin
    - metacoq-translations
    - metacoq-quotation
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v30
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup metacoq
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, coq-community
        name: metacoq
    - id: stepGetDerivation
      name: Getting derivation for current job (metacoq)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"coq-8.20\" --argstr job \"metacoq\" \\\n   --dry-run 2> err > out || (touch
        fail; true)\n"
    - name: Error reporting
      run: "echo \"out=\"; cat out\necho \"err=\"; cat err\n"
    - name: Failure check
      run: if [ -e fail ]; then exit 1; else exit 0; fi;
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: (echo -n status=; cat out err | grep "built:" | sed "s/.*/built/") >> $GITHUB_OUTPUT
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: equations'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "equations"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: metacoq-safechecker-plugin'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "metacoq-safechecker-plugin"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: metacoq-erasure-plugin'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "metacoq-erasure-plugin"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: metacoq-translations'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "metacoq-translations"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: metacoq-quotation'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "metacoq-quotation"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "metacoq"
  metacoq-common:
    needs:
    - coq
    - equations
    - metacoq-utils
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v30
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup metacoq
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, coq-community
        name: metacoq
    - id: stepGetDerivation
      name: Getting derivation for current job (metacoq-common)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"coq-8.20\" --argstr job \"metacoq-common\" \\\n   --dry-run 2> err > out
        || (touch fail; true)\n"
    - name: Error reporting
      run: "echo \"out=\"; cat out\necho \"err=\"; cat err\n"
    - name: Failure check
      run: if [ -e fail ]; then exit 1; else exit 0; fi;
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: (echo -n status=; cat out err | grep "built:" | sed "s/.*/built/") >> $GITHUB_OUTPUT
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: equations'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "equations"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: metacoq-utils'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "metacoq-utils"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "metacoq-common"
  metacoq-erasure:
    needs:
    - coq
    - equations
    - metacoq-safechecker
    - metacoq-template-pcuic
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v30
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup metacoq
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, coq-community
        name: metacoq
    - id: stepGetDerivation
      name: Getting derivation for current job (metacoq-erasure)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"coq-8.20\" --argstr job \"metacoq-erasure\" \\\n   --dry-run 2> err > out
        || (touch fail; true)\n"
    - name: Error reporting
      run: "echo \"out=\"; cat out\necho \"err=\"; cat err\n"
    - name: Failure check
      run: if [ -e fail ]; then exit 1; else exit 0; fi;
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: (echo -n status=; cat out err | grep "built:" | sed "s/.*/built/") >> $GITHUB_OUTPUT
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: equations'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "equations"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: metacoq-safechecker'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "metacoq-safechecker"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: metacoq-template-pcuic'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "metacoq-template-pcuic"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "metacoq-erasure"
  metacoq-erasure-plugin:
    needs:
    - coq
    - equations
    - metacoq-template-pcuic
    - metacoq-erasure
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v30
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup metacoq
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, coq-community
        name: metacoq
    - id: stepGetDerivation
      name: Getting derivation for current job (metacoq-erasure-plugin)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"coq-8.20\" --argstr job \"metacoq-erasure-plugin\" \\\n   --dry-run 2> err
        > out || (touch fail; true)\n"
    - name: Error reporting
      run: "echo \"out=\"; cat out\necho \"err=\"; cat err\n"
    - name: Failure check
      run: if [ -e fail ]; then exit 1; else exit 0; fi;
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: (echo -n status=; cat out err | grep "built:" | sed "s/.*/built/") >> $GITHUB_OUTPUT
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: equations'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "equations"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: metacoq-template-pcuic'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "metacoq-template-pcuic"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: metacoq-erasure'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "metacoq-erasure"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "metacoq-erasure-plugin"
  metacoq-pcuic:
    needs:
    - coq
    - equations
    - metacoq-common
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v30
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup metacoq
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, coq-community
        name: metacoq
    - id: stepGetDerivation
      name: Getting derivation for current job (metacoq-pcuic)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"coq-8.20\" --argstr job \"metacoq-pcuic\" \\\n   --dry-run 2> err > out
        || (touch fail; true)\n"
    - name: Error reporting
      run: "echo \"out=\"; cat out\necho \"err=\"; cat err\n"
    - name: Failure check
      run: if [ -e fail ]; then exit 1; else exit 0; fi;
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: (echo -n status=; cat out err | grep "built:" | sed "s/.*/built/") >> $GITHUB_OUTPUT
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: equations'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "equations"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: metacoq-common'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "metacoq-common"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "metacoq-pcuic"
  metacoq-quotation:
    needs:
    - coq
    - equations
    - metacoq-template-coq
    - metacoq-pcuic
    - metacoq-template-pcuic
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v30
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup metacoq
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, coq-community
        name: metacoq
    - id: stepGetDerivation
      name: Getting derivation for current job (metacoq-quotation)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"coq-8.20\" --argstr job \"metacoq-quotation\" \\\n   --dry-run 2> err >
        out || (touch fail; true)\n"
    - name: Error reporting
      run: "echo \"out=\"; cat out\necho \"err=\"; cat err\n"
    - name: Failure check
      run: if [ -e fail ]; then exit 1; else exit 0; fi;
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: (echo -n status=; cat out err | grep "built:" | sed "s/.*/built/") >> $GITHUB_OUTPUT
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: equations'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "equations"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: metacoq-template-coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "metacoq-template-coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: metacoq-pcuic'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "metacoq-pcuic"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: metacoq-template-pcuic'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "metacoq-template-pcuic"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "metacoq-quotation"
  metacoq-safechecker:
    needs:
    - coq
    - equations
    - metacoq-pcuic
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v30
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup metacoq
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, coq-community
        name: metacoq
    - id: stepGetDerivation
      name: Getting derivation for current job (metacoq-safechecker)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"coq-8.20\" --argstr job \"metacoq-safechecker\" \\\n   --dry-run 2> err
        > out || (touch fail; true)\n"
    - name: Error reporting
      run: "echo \"out=\"; cat out\necho \"err=\"; cat err\n"
    - name: Failure check
      run: if [ -e fail ]; then exit 1; else exit 0; fi;
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: (echo -n status=; cat out err | grep "built:" | sed "s/.*/built/") >> $GITHUB_OUTPUT
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: equations'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "equations"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: metacoq-pcuic'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "metacoq-pcuic"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "metacoq-safechecker"
  metacoq-safechecker-plugin:
    needs:
    - coq
    - equations
    - metacoq-template-pcuic
    - metacoq-safechecker
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v30
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup metacoq
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, coq-community
        name: metacoq
    - id: stepGetDerivation
      name: Getting derivation for current job (metacoq-safechecker-plugin)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"coq-8.20\" --argstr job \"metacoq-safechecker-plugin\" \\\n   --dry-run
        2> err > out || (touch fail; true)\n"
    - name: Error reporting
      run: "echo \"out=\"; cat out\necho \"err=\"; cat err\n"
    - name: Failure check
      run: if [ -e fail ]; then exit 1; else exit 0; fi;
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: (echo -n status=; cat out err | grep "built:" | sed "s/.*/built/") >> $GITHUB_OUTPUT
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: equations'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "equations"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: metacoq-template-pcuic'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "metacoq-template-pcuic"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: metacoq-safechecker'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "metacoq-safechecker"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "metacoq-safechecker-plugin"
  metacoq-template-coq:
    needs:
    - coq
    - equations
    - metacoq-common
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v30
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup metacoq
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, coq-community
        name: metacoq
    - id: stepGetDerivation
      name: Getting derivation for current job (metacoq-template-coq)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"coq-8.20\" --argstr job \"metacoq-template-coq\" \\\n   --dry-run 2> err
        > out || (touch fail; true)\n"
    - name: Error reporting
      run: "echo \"out=\"; cat out\necho \"err=\"; cat err\n"
    - name: Failure check
      run: if [ -e fail ]; then exit 1; else exit 0; fi;
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: (echo -n status=; cat out err | grep "built:" | sed "s/.*/built/") >> $GITHUB_OUTPUT
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: equations'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "equations"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: metacoq-common'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "metacoq-common"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "metacoq-template-coq"
  metacoq-template-pcuic:
    needs:
    - coq
    - equations
    - metacoq-template-coq
    - metacoq-pcuic
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v30
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup metacoq
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, coq-community
        name: metacoq
    - id: stepGetDerivation
      name: Getting derivation for current job (metacoq-template-pcuic)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"coq-8.20\" --argstr job \"metacoq-template-pcuic\" \\\n   --dry-run 2> err
        > out || (touch fail; true)\n"
    - name: Error reporting
      run: "echo \"out=\"; cat out\necho \"err=\"; cat err\n"
    - name: Failure check
      run: if [ -e fail ]; then exit 1; else exit 0; fi;
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: (echo -n status=; cat out err | grep "built:" | sed "s/.*/built/") >> $GITHUB_OUTPUT
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: equations'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "equations"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: metacoq-template-coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "metacoq-template-coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: metacoq-pcuic'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "metacoq-pcuic"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "metacoq-template-pcuic"
  metacoq-translations:
    needs:
    - coq
    - equations
    - metacoq-template-coq
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v30
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup metacoq
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, coq-community
        name: metacoq
    - id: stepGetDerivation
      name: Getting derivation for current job (metacoq-translations)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"coq-8.20\" --argstr job \"metacoq-translations\" \\\n   --dry-run 2> err
        > out || (touch fail; true)\n"
    - name: Error reporting
      run: "echo \"out=\"; cat out\necho \"err=\"; cat err\n"
    - name: Failure check
      run: if [ -e fail ]; then exit 1; else exit 0; fi;
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: (echo -n status=; cat out err | grep "built:" | sed "s/.*/built/") >> $GITHUB_OUTPUT
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: equations'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "equations"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: metacoq-template-coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "metacoq-template-coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "metacoq-translations"
  metacoq-utils:
    needs:
    - coq
    - equations
    runs-on: ubuntu-latest
    steps:
    - name: Determine which commit to initially checkout
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"target_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  echo \"target_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.target_commit }}
    - name: Determine which commit to test
      run: "if [ ${{ github.event_name }} = \"push\" ]; then\n  echo \"tested_commit=${{
        github.sha }}\" >> $GITHUB_ENV\nelse\n  merge_commit=$(git ls-remote ${{ github.event.repository.html_url
        }} refs/pull/${{ github.event.number }}/merge | cut -f1)\n  mergeable=$(git
        merge --no-commit --no-ff ${{ github.event.pull_request.base.sha }} > /dev/null
        2>&1; echo $?; git merge --abort > /dev/null 2>&1 || true)\n  if [ -z \"$merge_commit\"\
        \ -o \"x$mergeable\" != \"x0\" ]; then\n    echo \"tested_commit=${{ github.event.pull_request.head.sha
        }}\" >> $GITHUB_ENV\n  else\n    echo \"tested_commit=$merge_commit\" >> $GITHUB_ENV\n\
        \  fi\nfi\n"
    - name: Git checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ env.tested_commit }}
    - name: Cachix install
      uses: cachix/install-nix-action@v30
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable
    - name: Cachix setup metacoq
      uses: cachix/cachix-action@v15
      with:
        authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
        extraPullNames: coq, coq-community
        name: metacoq
    - id: stepGetDerivation
      name: Getting derivation for current job (metacoq-utils)
      run: "NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link \\\n   --argstr bundle
        \"coq-8.20\" --argstr job \"metacoq-utils\" \\\n   --dry-run 2> err > out
        || (touch fail; true)\n"
    - name: Error reporting
      run: "echo \"out=\"; cat out\necho \"err=\"; cat err\n"
    - name: Failure check
      run: if [ -e fail ]; then exit 1; else exit 0; fi;
    - id: stepCheck
      name: Checking presence of CI target for current job
      run: (echo -n status=; cat out err | grep "built:" | sed "s/.*/built/") >> $GITHUB_OUTPUT
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: coq'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "coq"
    - if: steps.stepCheck.outputs.status == 'built'
      name: 'Building/fetching previous CI target: equations'
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "equations"
    - if: steps.stepCheck.outputs.status == 'built'
      name: Building/fetching current CI target
      run: NIXPKGS_ALLOW_UNFREE=1 nix-build --no-out-link --argstr bundle "coq-8.20"
        --argstr job "metacoq-utils"
name: Nix CI for bundle coq-8.20
on:
  pull_request:
    paths:
    - .github/workflows/nix-action-coq-8.20.yml
  pull_request_target:
    paths-ignore:
    - .github/workflows/nix-action-coq-8.20.yml
    types:
    - opened
    - synchronize
    - reopened
  push:
    branches:
    - coq-8.20

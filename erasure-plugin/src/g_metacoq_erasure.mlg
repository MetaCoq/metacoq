
DECLARE PLUGIN "coq-metacoq-erasure.plugin"

{

open Stdarg
open Pp
open PeanoNat.Nat
open Datatypes
open Vernacextend
open Tm_util
open Erasure0

open Stdarg
open Pcoq.Prim
open Ltac_plugin
open Tacexpr
open Tacinterp
open Stdarg
open Tacarg
open Genredexpr

type erasure_command_args =
  | Unsafe
  | Time
  | Typed
  | BypassQeds

let pr_char c = str (Char.escaped c)

let bytes_of_list l =
  let bytes = Bytes.create (List.length l) in
  let rec fill acc = function
    | [] -> bytes
    | c :: cs ->
      Bytes.set bytes acc c;
      fill (1 + acc) cs
  in fill 0 l

let pr_char_list l =
  (* We allow utf8 encoding *)
  str (Caml_bytestring.caml_string_of_bytestring l)

type erasure_config =
  { unsafe : bool;
    time : bool;
    typed : bool;
    bypass_qeds : bool }

let default_config =
  { unsafe = false;
    time = false;
    typed = false;
    bypass_qeds = false }

let make_erasure_config config =
  let open Erasure0 in
  { enable_unsafe = if config.unsafe then all_unsafe_passes else no_unsafe_passes ;
    enable_typed_erasure = config.typed;
    dearging_config = default_dearging_config;
    inlined_constants = Kernames.KernameSet.empty }

let time_opt config str fn arg =
  if config.time then
    time str fn arg
  else fn arg

let check config env evm c =
  debug (fun () -> str"Quoting");
  let time str f arg = time_opt config str f arg in
  let term = time (str"Quoting") (Ast_quoter.quote_term_rec ~bypass:config.bypass_qeds env evm) (EConstr.to_constr evm c) in
  let erasure_config = make_erasure_config config in
  let mapping = [] in
  let erase =
    time (str"Erasure") (Erasure0.erase_and_print_template_program erasure_config mapping) term
  in
  Feedback.msg_notice (pr_char_list erase)

let interp_erase args env evm c =
  let open Erasure0 in
  let config =
    let rec aux config = function
      | [] -> config
      | arg :: args ->
        match arg with
        | Unsafe -> aux {config with unsafe = true} args
        | Time -> aux {config with time = true} args
        | Typed -> aux {config with typed = true} args
        | BypassQeds -> aux {config with bypass_qeds = true} args
    in aux default_config args
  in
  check config env evm c

let help_msg : string =
  "Usage:\n\
To erase a Gallina definition named <gid> type:\n\
   MetaCoq Erase <options> <gid>.\n\n\
To show this help message type:\n\
   MetaCoq Erase -help.\n\n\
Valid options:\n\
-typed       :  Run the typed erasure pipeline including a dearging phase. By default we run the pipeline without this phase.\n\
-unsafe      :  Run also partially verified passes of the pipeline. This includes the cofix to lazy translation.\n\
-time        :  Time each compilation phase\n\
-bypass-qeds :  Bypass the use of Qed and quote opaque proofs. Beware, this can result in large memory\n\
                consumption due to reification of large proof terms.\n\
                By default, we use the (trusted) Template-Coq quoting optimization that quotes every opaque term as an axiom.\n\
                All these axioms should live in Prop so that erasure is not affected by the absence of their bodies.\n\
-fast        : Enables an alternative implementation of the parameter stripping phase that uses accumulators\n\
               instead of a view (see Erasure.ERemoveParams).\n\
\n\
See https://metacoq.github.io for more detailed information."

}

ARGUMENT EXTEND erase_args
| [ "-unsafe" ] -> { Unsafe }
| [ "-time" ] -> { Time }
| [ "-typed" ] -> { Typed }
| [ "-bypass-qeds" ] -> { BypassQeds }
END

VERNAC COMMAND EXTEND MetaCoqErase CLASSIFIED AS QUERY
| [ "MetaCoq" "Erase" erase_args_list(l) constr(c) ] -> {
    let env = Global.env () in
    let evm = Evd.from_env env in
    let (c, _) = Constrintern.interp_constr env evm c in
    interp_erase l env evm c
  }
| [ "MetaCoq" "Erase" "-help" ] -> {
    Feedback.msg_notice (str help_msg)
  }
END

open Datatypes

type __ = Obj.t

type 'a crelation = __

type ('a, 'b) arrow = 'a -> 'b

val flip : ('a1 -> 'a2 -> 'a3) -> 'a2 -> 'a1 -> 'a3

type ('a, 'b) iffT = ('a -> 'b) * ('b -> 'a)

type ('a, 'r) coq_Reflexive = 'a -> 'r

val reflexivity : ('a1, 'a2) coq_Reflexive -> 'a1 -> 'a2

type ('a, 'r) complement = __

type ('a, 'r) coq_Irreflexive = ('a, ('a, 'r) complement) coq_Reflexive

type ('a, 'r) coq_Symmetric = 'a -> 'a -> 'r -> 'r

val symmetry : ('a1, 'a2) coq_Symmetric -> 'a1 -> 'a1 -> 'a2 -> 'a2

type ('a, 'r) coq_Transitive = 'a -> 'a -> 'a -> 'r -> 'r -> 'r

val transitivity :
  ('a1, 'a2) coq_Transitive -> 'a1 -> 'a1 -> 'a1 -> 'a2 -> 'a2 -> 'a2

type ('a, 'r) coq_PreOrder = { coq_PreOrder_Reflexive : ('a, 'r) coq_Reflexive;
                               coq_PreOrder_Transitive : ('a, 'r)
                                                         coq_Transitive }

val coq_PreOrder_Reflexive :
  ('a1, 'a2) coq_PreOrder -> ('a1, 'a2) coq_Reflexive

val coq_PreOrder_Transitive :
  ('a1, 'a2) coq_PreOrder -> ('a1, 'a2) coq_Transitive

type ('a, 'r) coq_StrictOrder = { coq_StrictOrder_Irreflexive : ('a, 'r)
                                                                coq_Irreflexive;
                                  coq_StrictOrder_Transitive : ('a, 'r)
                                                               coq_Transitive }

val coq_StrictOrder_Transitive :
  ('a1, 'a2) coq_StrictOrder -> ('a1, 'a2) coq_Transitive

type ('a, 'r) coq_PER = { coq_PER_Symmetric : ('a, 'r) coq_Symmetric;
                          coq_PER_Transitive : ('a, 'r) coq_Transitive }

val coq_PER_Symmetric : ('a1, 'a2) coq_PER -> ('a1, 'a2) coq_Symmetric

val coq_PER_Transitive : ('a1, 'a2) coq_PER -> ('a1, 'a2) coq_Transitive

type ('a, 'r) coq_Equivalence = { coq_Equivalence_Reflexive : ('a, 'r)
                                                              coq_Reflexive;
                                  coq_Equivalence_Symmetric : ('a, 'r)
                                                              coq_Symmetric;
                                  coq_Equivalence_Transitive : ('a, 'r)
                                                               coq_Transitive }

val coq_Equivalence_Reflexive :
  ('a1, 'a2) coq_Equivalence -> ('a1, 'a2) coq_Reflexive

val coq_Equivalence_Symmetric :
  ('a1, 'a2) coq_Equivalence -> ('a1, 'a2) coq_Symmetric

val coq_Equivalence_Transitive :
  ('a1, 'a2) coq_Equivalence -> ('a1, 'a2) coq_Transitive

val coq_Equivalence_PER : ('a1, 'a2) coq_Equivalence -> ('a1, 'a2) coq_PER

type ('a, 'eqA, 'r) coq_Antisymmetric = 'a -> 'a -> 'r -> 'r -> 'eqA

val antisymmetry :
  ('a1, 'a2) coq_Equivalence -> ('a1, 'a2, 'a3) coq_Antisymmetric -> 'a1 ->
  'a1 -> 'a3 -> 'a3 -> 'a2

type ('a, 'r, 'x) subrelation = 'a -> 'a -> 'r -> 'x

val is_subrelation : ('a1, 'a2, 'a3) subrelation -> 'a1 -> 'a1 -> 'a2 -> 'a3

val subrelation_symmetric :
  ('a1, 'a2) coq_Symmetric -> ('a1, 'a2, 'a2) subrelation

val flip_Reflexive : ('a1, 'a2) coq_Reflexive -> ('a1, 'a2) coq_Reflexive

val flip_Symmetric : ('a1, 'a2) coq_Symmetric -> ('a1, 'a2) coq_Symmetric

val flip_Transitive : ('a1, 'a2) coq_Transitive -> ('a1, 'a2) coq_Transitive

val flip_Antisymmetric :
  ('a1, 'a2) coq_Equivalence -> ('a1, 'a2, 'a3) coq_Antisymmetric -> ('a1,
  'a2, 'a3) coq_Antisymmetric

val flip_PreOrder : ('a1, 'a2) coq_PreOrder -> ('a1, 'a2) coq_PreOrder

val flip_StrictOrder :
  ('a1, 'a2) coq_StrictOrder -> ('a1, 'a2) coq_StrictOrder

val flip_PER : ('a1, 'a2) coq_PER -> ('a1, 'a2) coq_PER

val flip_Equivalence :
  ('a1, 'a2) coq_Equivalence -> ('a1, 'a2) coq_Equivalence

val eq_equivalence : ('a1, __) coq_Equivalence

val iff_equivalence : (__, __) coq_Equivalence

val arrow_Reflexive_obligation_1 : ('a1, 'a1) arrow

val arrow_Reflexive : (__, __) arrow

val arrow_Transitive_obligation_1 :
  ('a1, 'a2) arrow -> ('a2, 'a3) arrow -> ('a1, 'a3) arrow

val arrow_Transitive : (__, __) arrow -> (__, __) arrow -> (__, __) arrow

val iffT_Reflexive : (__, __) iffT

val iffT_Symmetric : (__, __) iffT -> (__, __) iffT

val iffT_Transitive : (__, __) iffT -> (__, __) iffT -> (__, __) iffT

type ('a, 'x0, 'x) relation_equivalence = 'a -> 'a -> ('x0, 'x) iffT

type ('a, 'r, 'x) relation_conjunction = 'r * 'x

type ('a, 'r, 'x) relation_disjunction = ('r, 'x) sum

val relation_equivalence_equivalence :
  ('a1 crelation, ('a1, __, __) relation_equivalence) coq_Equivalence

val relation_implication_preorder :
  ('a1 crelation, ('a1, __, __) subrelation) coq_PreOrder

type ('a, 'eqA, 'r) coq_PartialOrder =
  ('a, 'eqA, ('a, 'r, 'r) relation_conjunction) relation_equivalence

val partial_order_equivalence :
  ('a1, 'a2) coq_Equivalence -> ('a1, 'a3) coq_PreOrder -> ('a1, 'a2, 'a3)
  coq_PartialOrder -> ('a1, 'a2, ('a1, 'a3, 'a3) relation_conjunction)
  relation_equivalence

val partial_order_antisym :
  ('a1, 'a2) coq_Equivalence -> ('a1, 'a3) coq_PreOrder -> ('a1, 'a2, 'a3)
  coq_PartialOrder -> ('a1, 'a2, 'a3) coq_Antisymmetric

val coq_PartialOrder_inverse :
  ('a1, 'a2) coq_Equivalence -> ('a1, 'a3) coq_PreOrder -> ('a1, 'a2, 'a3)
  coq_PartialOrder -> ('a1, 'a2, 'a3) coq_PartialOrder
